openjdk/openjdk.sh
[openjdk]
[openjdk] == openjdk unit test ==
[openjdk] [INFO] generating benchmarks.jar by maven tool first:
[openjdk]
[openjdk] [INFO] Test docker hub official image first:
[openjdk]
# JMH version: 1.21
# VM version: JDK 1.8.0_212, OpenJDK 64-Bit Server VM, 25.212-b04
# VM invoker: /usr/local/openjdk-8/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2668473972.062 ops/s
# Warmup Iteration   2: 2663000043.667 ops/s
# Warmup Iteration   3: 2582205136.534 ops/s
# Warmup Iteration   4: 2662933063.675 ops/s
# Warmup Iteration   5: 2619739917.917 ops/s
Iteration   1: 2668076913.176 ops/s
Iteration   2: 2666645920.129 ops/s
Iteration   3: 2671683792.220 ops/s
Iteration   4: 2671771631.490 ops/s
Iteration   5: 2665051781.535 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2666074029.600 ops/s
# Warmup Iteration   2: 2664220599.889 ops/s
# Warmup Iteration   3: 2668789294.661 ops/s
# Warmup Iteration   4: 2656204508.300 ops/s
# Warmup Iteration   5: 2633261425.362 ops/s
Iteration   1: 2669563976.387 ops/s
Iteration   2: 2668303870.960 ops/s
Iteration   3: 2664889792.461 ops/s
Iteration   4: 2664472851.136 ops/s
Iteration   5: 2666044321.604 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2665288400.965 ops/s
# Warmup Iteration   2: 2668241574.221 ops/s
# Warmup Iteration   3: 2670234142.615 ops/s
# Warmup Iteration   4: 2672016696.187 ops/s
# Warmup Iteration   5: 2665537573.437 ops/s
Iteration   1: 2665136294.072 ops/s
Iteration   2: 2656022776.831 ops/s
Iteration   3: 2670220256.777 ops/s
Iteration   4: 2664937744.615 ops/s
Iteration   5: 2668076552.552 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2666765729.456 ops/s
# Warmup Iteration   2: 2656669610.039 ops/s
# Warmup Iteration   3: 2669221013.099 ops/s
# Warmup Iteration   4: 2669641279.009 ops/s
# Warmup Iteration   5: 2667485824.133 ops/s
Iteration   1: 2668696894.041 ops/s
Iteration   2: 2662211883.424 ops/s
Iteration   3: 2666621081.352 ops/s
Iteration   4: 2666816012.764 ops/s
Iteration   5: 2625784759.255 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2667972615.952 ops/s
# Warmup Iteration   2: 2665427963.769 ops/s
# Warmup Iteration   3: 2669694379.580 ops/s
# Warmup Iteration   4: 2664583689.251 ops/s
# Warmup Iteration   5: 2666614184.421 ops/s
Iteration   1: 2663101815.583 ops/s
Iteration   2: 2670451275.644 ops/s
Iteration   3: 2581274221.171 ops/s
Iteration   4: 2672067384.397 ops/s
Iteration   5: 2672713109.984 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2662025476.542 ±(99.9%) 14302923.990 ops/s [Average]
  (min, avg, max) = (2581274221.171, 2662025476.542, 2672713109.984), stdev = 19093994.316
  CI (99.9%): [2647722552.553, 2676328400.532] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score          Error  Units
MyBenchmark.testMethod  thrpt   25  2662025476.542 ± 14302923.990  ops/s
[openjdk] [INFO] Test clear docker image:
[openjdk]
# JMH version: 1.21
# VM version: JDK 1.8.0-internal, OpenJDK 64-Bit Server VM, 25.71-b00
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.MyBenchmark.testMethod

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 2665773406.621 ops/s
# Warmup Iteration   2: 2661462017.170 ops/s
# Warmup Iteration   3: 2668059351.863 ops/s
# Warmup Iteration   4: 2668766541.370 ops/s
# Warmup Iteration   5: 2669905470.691 ops/s
Iteration   1: 2669336080.510 ops/s
Iteration   2: 2668064041.431 ops/s
Iteration   3: 2669510503.900 ops/s
Iteration   4: 2656306804.308 ops/s
Iteration   5: 2661945438.159 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 2663580560.415 ops/s
# Warmup Iteration   2: 2582919752.530 ops/s
# Warmup Iteration   3: 2668985688.906 ops/s
# Warmup Iteration   4: 2671768843.334 ops/s
# Warmup Iteration   5: 2670319181.095 ops/s
Iteration   1: 2670097674.254 ops/s
Iteration   2: 2659473104.798 ops/s
Iteration   3: 2664588896.048 ops/s
Iteration   4: 2664181475.915 ops/s
Iteration   5: 2668820875.412 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2659141983.789 ops/s
# Warmup Iteration   2: 2667509993.340 ops/s
# Warmup Iteration   3: 2633594992.425 ops/s
# Warmup Iteration   4: 2662109508.657 ops/s
# Warmup Iteration   5: 2669096786.398 ops/s
Iteration   1: 2622242849.472 ops/s
Iteration   2: 2672168714.756 ops/s
Iteration   3: 2669756742.604 ops/s
Iteration   4: 2661146308.903 ops/s
Iteration   5: 2667948985.187 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2661813636.909 ops/s
# Warmup Iteration   2: 2671732836.166 ops/s
# Warmup Iteration   3: 2666204549.779 ops/s
# Warmup Iteration   4: 2667928971.705 ops/s
# Warmup Iteration   5: 2668772860.561 ops/s
Iteration   1: 2661028010.989 ops/s
Iteration   2: 2668862173.839 ops/s
Iteration   3: 2665000135.130 ops/s
Iteration   4: 2660653716.947 ops/s
Iteration   5: 2658790091.132 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2640058117.125 ops/s
# Warmup Iteration   2: 2666068574.871 ops/s
# Warmup Iteration   3: 2583248577.101 ops/s
# Warmup Iteration   4: 2660230837.332 ops/s
# Warmup Iteration   5: 2664333484.043 ops/s
Iteration   1: 2668861141.031 ops/s
Iteration   2: 2664566034.637 ops/s
Iteration   3: 2667798848.180 ops/s
Iteration   4: 2663068689.920 ops/s
Iteration   5: 2669055643.075 ops/s


Result "org.sample.MyBenchmark.testMethod":
  2663730919.221 ?(99.9%) 7207884.018 ops/s [Average]
  (min, avg, max) = (2622242849.472, 2663730919.221, 2672168714.756), stdev = 9622318.944
  CI (99.9%): [2656523035.204, 2670938803.239] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt           Score         Error  Units
MyBenchmark.testMethod  thrpt   25  2663730919.221 ? 7207884.018  ops/s
